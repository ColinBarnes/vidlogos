var width = document.body.clientWidth -30,
	height = 600;

var svg = d3.select("body")
  .append("svg")
  	.attr("width", width)
  	.attr("height", height);

var xScale = d3.time.scale()
	.range([0, width]);

var yScale = d3.scale.linear()
	.range([height, 0]);

// Color scales
var maleScale = d3.scale.ordinal()
	.range(colorbrewer.Blues[9]);

var femaleScale = d3.scale.ordinal()
	.range(colorbrewer.RdPu[9]);

// Date format for monthly data
var format = d3.time.format('%Y-%m');

// Modify the data so it can be presented as a stack.
// Returned data will have a value 'y' for thickness,
// 'y0' for offset, and x value for time.
var stack = d3.layout.stack()
	.offset("wiggle")
	.values(function (d) { return d.values; }) // 'values' is generated by d3.nest()
	.x(function (d) { return d.date; })
	.y(function (d) { return d.value; });

// Group the data by the person
var nest = d3.nest()
	.key(function (d) { return d.person; });

// Generate path data
var area = d3.svg.area()
	.interpolate("cardinal")
	.x(function (d) { return xScale(d.date); })
	.y0(function (d) { return yScale(d.y0); })
	.y1(function (d) { return yScale(d.y0 + d.y); });

var layers = {};

d3.csv('./full_data.csv', function (data) {
	data.forEach(function (d) {
		d.date = format.parse(d.date);
		d.value = +d.value;
		d.is_female = +d.is_female;
	});

	layers = stack(nest.entries(data));

	xScale.domain(d3.extent(data, function (d) {
		return d.date;
	}));

	yScale.domain([0, d3.max(data, function (d) {
		return d.y0 + d.y;
	})]);

	// Create a path for each person in the dataset
	svg.selectAll(".layer")
		.data(layers)
	  .enter().append("path")
	  	.attr("class", "layer")
	  	.attr("d", function (d) {
	  		return area(d.values);
	  	})
	  	.attr("fill", function (d, i){
	  		if(d.values[0].is_female == 1){
	  			return femaleScale(i);
	  		} else {
	  			return maleScale(i);
	  		}
	  	});
});

